// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema


generator client {
  provider = "prisma-client-js"
}


//datasource db {
  //provider = "sqlite"
  //url      = "file:./dev.db"
//}


datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 Int       @id @default(autoincrement())
  compoundId         String    @unique @map(name: "compound_id")
  userId             Int       @map(name: "user_id")
  providerType       String    @map(name: "provider_type")
  providerId         String    @map(name: "provider_id")
  providerAccountId  String    @map(name: "provider_account_id")
  refreshToken       String?   @map(name: "refresh_token")
  accessToken        String?   @map(name: "access_token")
  accessTokenExpires DateTime? @map(name: "access_token_expires")
  createdAt          DateTime  @default(now()) @map(name: "created_at")
  updatedAt          DateTime  @default(now()) @map(name: "updated_at")

  @@index([providerAccountId], name: "providerAccountId")
  @@index([providerId], name: "providerId")
  @@index([userId], name: "userId")
  @@map(name: "accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  userId       Int      @map(name: "user_id")
  expires      DateTime
  sessionToken String   @unique @map(name: "session_token")
  accessToken  String   @unique @map(name: "access_token")
  createdAt    DateTime @default(now()) @map(name: "created_at")
  updatedAt    DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "sessions")
}

model User {
  id            Int       @id @default(autoincrement())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map(name: "email_verified")
  image         String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @default(now()) @map(name: "updated_at")
  username  String? @unique
  password  String?
  contracts  Contract[]
  tokens  Token[]

  @@map(name: "users")
}

model VerificationRequest {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now()) @map(name: "created_at")
  updatedAt  DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "verification_requests")
}

model Note {
  id        Int     @default(autoincrement()) @id
  title     String
  notebody   String
  author  String
  publish  Boolean?  
}

model Contract {
  id        Int     @default(autoincrement()) @id
  contractName     String
  tokenType  String
  address  String
  tokenName  String
  tokenSymbol  String
  network  String
  scanUrl  String
  ownerAddress  String
  ownerUser   User @relation(fields: [ownerId], references: [id])
  ownerId  Int // relation scalar field  (used in the `@relation` attribute above)
  description  String?
  notes  String?
  createdAt     DateTime  @default(now())
  createdBy  Int
  updatedAt     DateTime?  @default(now())
  updatedBy  Int?
  deleted  Boolean?
  tokens Token[]

  @@map(name: "contracts")
}

model Token {
  id        Int     @default(autoincrement()) @id
  contract   Contract @relation(fields: [contractId], references: [id])
  contractId  Int // relation scalar field  (used in the `@relation` attribute above)
  tokenId  Int
  metaName  String?
  metaDescription  String?
  metaImageUrl  String
  tokenJsonUri  String
  ownerAddress  String
  ownerUser   User @relation(fields: [ownerId], references: [id])
  ownerId  Int // relation scalar field  (used in the `@relation` attribute above)
  notes  String?
  display  String?
  forSale  String?
  salePrice  Float?
  createdAt     DateTime  @default(now())
  createdBy  Int
  updatedAt     DateTime?  @default(now())
  updatedBy  Int?
  deleted  String?

  @@map(name: "tokens")
} 