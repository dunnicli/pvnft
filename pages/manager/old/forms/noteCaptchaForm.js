import { useForm } from "react-hook-form";
import { yupResolver } from "@hookform/resolvers/yup";
import * as Yup from "yup";
import Head from "next/head";
import Router from "next/router";
import ReCAPTCHA from "react-google-recaptcha";
//import useState from "react";

export default Home;

function Home() {
  function onChange(value) {
    console.log("Captcha value:", value);
  }
  // form validation rules
  const validationSchema = Yup.object().shape({
    title: Yup.string().required("Title is required"),
    notebody: Yup.string().required("The note is required"),
    author: Yup.string().required("Author is required"),
  });
  const formOptions = { resolver: yupResolver(validationSchema) };

  // get functions to build form with useForm() hook
  const { register, handleSubmit, reset, formState } = useForm(formOptions);
  const { errors } = formState;

  /**
  function onSubmit(data) {
    // display form data on success
    alert("SUCCESS!! :-)\n\n" + JSON.stringify(data, null, 4));
    return false;
  }
 */
  //handleSubmit(async (data) => await fetchAPI(data));

  const onSubmit = async (data, e) => {
    e.preventDefault();
    const response = await fetch("/api/notes/newnote", {
      method: "POST",
      body: JSON.stringify(data),
    });

    return await response.json(), await Router.push("/manager/notes");
  };

  return (
    <div>
      <Head>
        <title>Note Form Testing</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="w-full flex flex-col sm:flex-row flex-grow overflow-hidden">
        <div className="sm:w-1/2 md:1/2 w-full flex-shrink flex-grow-0 p-10">
          <h1>Note Form Validation Example</h1>

          <form onSubmit={handleSubmit(onSubmit)}>
            <div>
              <p>&nbsp;</p>
              <div>
                <label>Title</label>
                <br />
                <input
                  name="title"
                  type="text"
                  {...register("title")}
                  className={`form-control 
                shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline
                ${errors.title ? "is-invalid" : ""}`}
                />
                <div className="invalid-feedback">{errors.title?.message}</div>
              </div>
              <p>&nbsp;</p>
              <div>
                <label>Note Body</label>
                <br />
                <input
                  name="notebody"
                  type="text"
                  {...register("notebody")}
                  className={`form-control 
                shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline
                ${errors.notebody ? "is-invalid" : ""}`}
                />
                <div className="invalid-feedback">
                  {errors.notebody?.message}
                </div>
              </div>
            </div>
            <div>
              <label>Author</label>
              <br />
              <input
                name="author"
                type="text"
                {...register("author")}
                className={`form-control 
                shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline
                ${errors.author ? "is-invalid" : ""}`}
              />
              <div className="invalid-feedback">{errors.author?.message}</div>
            </div>
            <p>&nbsp;</p>
            <div>
              <ReCAPTCHA
                required
                sitekey={process.env.NEXT_PUBLIC_RECAPTCHA_SITE_KEY_V2}
                onChange={onChange}
              />
            </div>

            <p>&nbsp;</p>
            <p>&nbsp;</p>
            <p>&nbsp;</p>
            <div>
              <button type="submit">Register</button> &nbsp; &nbsp;
              <button type="button" onClick={() => reset()}>
                Reset
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  );
}
