import { useForm } from "react-hook-form";
import { yupResolver } from "@hookform/resolvers/yup";
import * as Yup from "yup";
import Head from "next/head";
import Router from "next/router";

export default function Register() {
  // form validation rules
  const validationSchema = Yup.object().shape({
    firstName: Yup.string().required("First name is required"),
    lastName: Yup.string().required("Last name is required"),
    email: Yup.string().required("Email is required").email("Email is invalid"),
    password: Yup.string()
      .min(6, "Password must be at least 6 characters")
      .required("Password is required"),
    confirmPassword: Yup.string()
      .oneOf([Yup.ref("password"), null], "Passwords must match")
      .required("Confirm Password is required"),
  });
  const formOptions = { resolver: yupResolver(validationSchema) };

  // get functions to build form with useForm() hook
  const { register, handleSubmit, reset, formState } = useForm(formOptions);
  const { errors } = formState;

  const onSubmit = async (data, e) => {
    e.preventDefault();
    const response = await fetch("/api/register/newRegistration", {
      method: "POST",
      body: JSON.stringify(data),
    });
    //alert("SUCCESS!! Please Sign In");
    return await response.json(), await Router.push("/api/auth/signin");
  };

  return (
    <div>
      <Head>
        <title>Registration Form - PVAR</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="w-full flex flex-col sm:flex-row flex-grow overflow-hidden">
        <div className="sm:w-1/2 md:1/2 w-full flex-shrink flex-grow-0 p-10">
          <h1>PVAR Registration Form</h1>

          <form onSubmit={handleSubmit(onSubmit)}>
            <div>
              <p>&nbsp;</p>
              <div>
                <label>First Name</label>
                <br />
                <input
                  name="firstName"
                  placeholder="First Name"
                  type="text"
                  {...register("firstName")}
                  className={`form-control 
                shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline
                ${errors.firstName ? "is-invalid" : ""}`}
                />
                <div className="invalid-feedback">
                  {errors.firstName?.message}
                </div>
              </div>
              <p>&nbsp;</p>
              <div>
                <label>Last Name</label>
                <br />
                <input
                  name="lastName"
                  placeholder="Last Name"
                  type="text"
                  {...register("lastName")}
                  className={`form-control 
                shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline
                ${errors.lastName ? "is-invalid" : ""}`}
                />
                <div className="invalid-feedback">
                  {errors.lastName?.message}
                </div>
              </div>
            </div>
            <div>
              <p>&nbsp;</p>
              <div>
                <label>Email</label>
                <br />
                <input
                  name="email"
                  placeholder="Email Address"
                  type="text"
                  {...register("email")}
                  className={`form-control 
                shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline
                ${errors.email ? "is-invalid" : ""}`}
                />
                <div className="invalid-feedback">{errors.email?.message}</div>
              </div>
            </div>
            <div>
              <p>&nbsp;</p>
              <div>
                <label>Password</label>
                <br />
                <input
                  name="password"
                  placeholder="Password"
                  type="password"
                  {...register("password")}
                  className={`form-control 
                shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline
                ${errors.password ? "is-invalid" : ""}`}
                />
                <div className="invalid-feedback">
                  {errors.password?.message}
                </div>
              </div>
              <p>&nbsp;</p>
              <div>
                <label>Confirm Password</label>
                <br />
                <input
                  name="confirmPassword"
                  placeholder="Re-enter Password"
                  type="password"
                  {...register("confirmPassword")}
                  className={`form-control 
                shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline
                ${errors.confirmPassword ? "is-invalid" : ""}`}
                />
                <div className="invalid-feedback">
                  {errors.confirmPassword?.message}
                </div>
              </div>
            </div>

            <p>&nbsp;</p>
            <p>&nbsp;</p>
            <div>
              <button
                type="submit"
                className="font-bold mt-4 bg-green-500 text-white rounded p-4 shadow-lg"
              >
                Register
              </button>
              <p>&nbsp;</p>
              <p>&nbsp;</p>

              <button type="button" onClick={() => reset()}>
                Reset
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  );
}
